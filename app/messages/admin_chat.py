from app.config import settings
import functools
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


def create_publication_links_admin_message(
    username: str,
    full_name: str,
    integration_id: int,
    campaign_id: int,
    description: dict,
    publication_links: list,
    views_count: int = 0,
    materials: dict = None,
) -> tuple[str, InlineKeyboardMarkup]:

    if materials is None:
        materials = {}

    desc_lines = [f"{key}: {value}" for key, value in description.items()]
    mat_lines = [f"{key}: {value}" for key, value in materials.items()]

    admin_text = (
        f"üîó *–°—Å—ã–ª–∫–∏ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç –±–ª–æ–≥–≥–µ—Ä–∞*\n\n"
        f"–ë–ª–æ–≥–≥–µ—Ä: @{username}\n"
        f"–ü–æ–ª–Ω–æ–µ –∏–º—è: {full_name}\n\n"
        f"–ö–∞–º–ø–∞–Ω–∏—è ID: {campaign_id}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏:\n" + "\n".join(desc_lines) + "\n\n"
        f"–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ID: {integration_id}\n"
        f"–°—Å—ã–ª–∫–∏: {publication_links or '‚Äî'}\n"
        f"–ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {views_count}\n"
        f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:\n" + "\n".join(mat_lines) + "\n\n"
        f"–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
    )

    accept_button = InlineKeyboardButton(
        text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
        callback_data=f"approve_integration_done:{integration_id}",
    )
    reject_button = InlineKeyboardButton(
        text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_integration:{integration_id}"
    )

    admin_markup = InlineKeyboardMarkup(
        inline_keyboard=[[accept_button, reject_button]]
    )

    return admin_text, admin_markup


def create_integration_admin_message(
    username: str,
    full_name: str,
    integration_id: int,
    campaign_id: int,
    description: dict,
    materials: dict,
) -> tuple[str, InlineKeyboardMarkup]:
    desc_lines = [f"{key}: {value}" for key, value in description.items()]
    mat_lines = [f"{key}: {value}" for key, value in materials.items()]

    admin_text = (
        f"–ù–æ–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n"
        f"–ë–ª–æ–≥–≥–µ—Ä: @{username}\n"
        f"–ü–æ–ª–Ω–æ–µ –∏–º—è: {full_name}\n\n"
        f"–ö–∞–º–ø–∞–Ω–∏—è ID: {campaign_id}\n"
        f"–¢–ó –∫–∞–º–ø–∞–Ω–∏–∏:\n" + "\n".join(desc_lines) + "\n\n"
        f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:\n" + "\n".join(mat_lines) + "\n\n"
        f"–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ID: {integration_id}\n"
        f"–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
    )

    accept_button = InlineKeyboardButton(
        text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
        callback_data=f"approve_integration_materials:{integration_id}",
    )
    reject_button = InlineKeyboardButton(
        text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_integration:{integration_id}"
    )

    admin_markup = InlineKeyboardMarkup(
        inline_keyboard=[[accept_button, reject_button]]
    )

    return admin_text, admin_markup


def create_deposit_admin_message(
    company_transaction_id: int,
    company_id: int,
    telegram_id: int,
    username: str,
    full_name: str,
    deposit_amount: float,
) -> tuple[str, InlineKeyboardMarkup]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏.

    Args:
        company_transaction_id: ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
        company_id: ID –∫–æ–º–ø–∞–Ω–∏–∏.
        telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        username: Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (@username –∏–ª–∏ None).
        full_name: –ü–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ None).
        deposit_amount: –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.

    Returns:
        Tuple[str, InlineKeyboardMarkup]: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞.
    """

    admin_message = (
        f"üí∞ *–ù–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É*\n"
        f"–°—É–º–º–∞: *{deposit_amount:.2f}‚ÇΩ*\n"
        f"ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: `{company_transaction_id}`\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username or '–Ω–µ —É–∫–∞–∑–∞–Ω'} ({full_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'})\n"
        f"Telegram ID: `{telegram_id}`\n"
        f"–ö–æ–º–ø–∞–Ω–∏—è ID: `{company_id}`"
    )

    approve_button = InlineKeyboardButton(
        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_deposit:{company_transaction_id}"
    )
    reject_button = InlineKeyboardButton(
        text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_deposit:{company_transaction_id}"
    )

    admin_markup = InlineKeyboardMarkup(
        inline_keyboard=[[approve_button, reject_button]]
    )

    return admin_message, admin_markup


def create_profile_links_admin_message(
    blogger_id: int,
    telegram_id: int,
    username: str,
    full_name: str,
    profile_links: list[str],
) -> tuple[str, InlineKeyboardMarkup]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –±–ª–æ–≥–≥–µ—Ä–∞.

    Args:
        blogger: –û–±—ä–µ–∫—Ç –±–ª–æ–≥–≥–µ—Ä–∞ (Blogger).
        telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram (@username –∏–ª–∏ None).
        full_name: –ü–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ None).
        profile_links: –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏ –±–ª–æ–≥–≥–µ—Ä–∞.

    Returns:
        Tuple[str, InlineKeyboardMarkup]: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞.
    """

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    admin_message = (
        f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –±–ª–æ–≥–≥–µ—Ä–∞ (ID: {blogger_id})\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username or '–Ω–µ —É–∫–∞–∑–∞–Ω'} ({full_name or '–Ω–µ —É–∫–∞–∑–∞–Ω'})\n"
        f"Telegram ID: {telegram_id}\n"
        f"–°—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏:\n" + "\n".join(profile_links) + "\n"
        f"–ü—Ä–æ—Ñ–∏–ª—å –æ–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è.\n"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    approve_button = InlineKeyboardButton(
        text="–û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_blogger:{blogger_id}"
    )
    reject_button = InlineKeyboardButton(
        text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_blogger:{blogger_id}"
    )

    admin_markup = InlineKeyboardMarkup(
        inline_keyboard=[[approve_button, reject_button]]
    )

    return admin_message, admin_markup


def create_campaign_admin_message(
    campaign_id: int,
    company_id: int,
    telegram_id: int,
    username: str,
    full_name: str,
    description: dict,
    view_price: int,
) -> tuple[str, InlineKeyboardMarkup]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç.

    Args:
        campaign: –û–±—ä–µ–∫—Ç –∫–∞–º–ø–∞–Ω–∏–∏ (Campaign).
        company: –û–±—ä–µ–∫—Ç –∫–æ–º–ø–∞–Ω–∏–∏ (Company).
        telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram (@username –∏–ª–∏ None).
        full_name: –ü–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ None).
        description: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–º–ø–∞–Ω–∏–∏.

    Returns:
        Tuple[str, InlineKeyboardMarkup]: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞.
    """

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    admin_message = (
        f"–ù–æ–≤–∞—è –∫–∞–º–ø–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É (ID: {campaign_id})\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username or '–Ω–µ —É–∫–∞–∑–∞–Ω'} ({full_name or '–Ω–µ —É–∫–∞–∑–∞–Ω'})\n"
        f"Telegram ID: {telegram_id}\n"
        f"–ö–æ–º–ø–∞–Ω–∏—è ID: {company_id}\n"
        f"–¶–µ–Ω–∞ –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä: {view_price} —Ä—É–±.\n"
        f"–î–µ—Ç–∞–ª–∏ –∫–∞–º–ø–∞–Ω–∏–∏:\n"
        f"- –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {description.get('content_type', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"- –°–æ—Ü—Å–µ—Ç–∏: {description.get('social_networks', '–Ω–µ —É–∫–∞–∑–∞–Ω—ã')}\n"
        f"- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏: {description.get('audience_priority', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"- –¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞: {description.get('product_type', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"- –°—Å—ã–ª–∫–∞: {description.get('website_link', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"- –°–ø–æ—Å–æ–± —Å–≤—è–∑–∏: {description.get('contact_method', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"- –°—Ç–∏–ª—å —Ä–µ–∫–ª–∞–º—ã: {description.get('advertising_style', '–Ω–µ —É–∫–∞–∑–∞–Ω')}"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    approve_button = InlineKeyboardButton(
        text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_campaign:{campaign_id}"
    )
    reject_button = InlineKeyboardButton(
        text="–û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"reject_campaign:{campaign_id}"
    )

    admin_markup = InlineKeyboardMarkup(
        inline_keyboard=[[approve_button, reject_button]]
    )

    return admin_message, admin_markup


def extract_user_id(update) -> int:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç user_id –∏–∑ update, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –Ω—É–∂–Ω—ã–π –æ–±—ä–µ–∫—Ç."""
    # –°–ø–∏—Å–æ–∫ –∞—Ç—Ä–∏–±—É—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å .from_user.id
    update_paths = [
        "message",
        "edited_message",
        "callback_query",
        "inline_query",
        "chosen_inline_result",
        "shipping_query",
        "pre_checkout_query",
        "poll_answer",
        "my_chat_member",
        "chat_member",
        "chat_join_request",
    ]  # –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—É—Ç–µ–π –ª–æ–≤–∏—Ç—å –∞–ø–¥–µ–π—Ç—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∞ –≤ –∞–¥–º–∏–Ω—á–∞—Ç–µ

    for path in update_paths:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º getattr, —á—Ç–æ–±—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç
        user = getattr(getattr(update, path, None), "from_user", None)
        if user is not None:
            return user.id


# –≤ –∞–¥–º–∏–Ω—á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
def for_admin(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""

    @functools.wraps(func)
    async def wrapper(update, *args, **kwargs):
        user_id = extract_user_id(update)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if user_id not in settings.ADMIN_IDS:
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–ª–∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            print(f"Unauthorized access attempt by user {user_id}")
            return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
        return await func(update, *args, **kwargs)

    return wrapper
