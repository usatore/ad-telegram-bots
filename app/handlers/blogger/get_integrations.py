from aiogram import F, Router
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup

from app.dao.blogger import BloggerDAO
from app.dao.campaign import CampaignDAO
from app.dao.integration import IntegrationDAO

router = Router()


@router.callback_query(F.data == "get_integrations")
async def get_integrations(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –±–ª–æ–≥–≥–µ—Ä–∞."""

    blogger = await BloggerDAO.get_one_or_none(telegram_id=callback.from_user.id)
    if not blogger:
        await callback.answer(
            "–í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –±–ª–æ–≥–≥–µ—Ä–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É"
        )
        return

    integrations = await IntegrationDAO.get_all(blogger_id=blogger.id)
    if not integrations:
        await callback.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π.")
        return

    for integration in integrations:
        campaign = await CampaignDAO.get_one_or_none(id=integration.campaign_id)

        integration_status = "‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ" if integration.approved else "üïí –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ"
        is_done = "‚úîÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if integration.done else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"

        text = (
            f"–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ID: {integration.id}\n"
            f"–ö–∞–º–ø–∞–Ω–∏—è: {campaign.description if campaign else '‚ùì –ù–µ –Ω–∞–π–¥–µ–Ω–∞'}\n"
            f"–°—Å—ã–ª–∫–∏: {integration.publication_links or '‚Äî'}\n"
            f"–ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {integration.views_count or 0}\n"
            f"–°—Ç–∞—Ç—É—Å: {integration_status}, {is_done}"
        )

        markup = None
        if integration.approved and not integration.done:
            button = InlineKeyboardButton(
                text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
                callback_data=f"send_publication_links:{integration.id}",
            )
            markup = InlineKeyboardMarkup(inline_keyboard=[[button]])

        await callback.message.answer(text, reply_markup=markup)
